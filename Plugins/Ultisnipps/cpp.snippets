priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet snips "All snippets"
snips    ->    see all snippets
ponce    ->    pragma once
ctmp     ->    contest template
tmp      ->    normal template
def-etc  ->    define enable test case
def-cexpostr   define __COMPILE_EXPO_STR
etf      ->    euler totient function PHI(0-1e5+9)
equation ->    linear diophantine equation solver class
sieve    ->    bitwise sieve of eratosthanes
powmul   ->    binary exponentiation with indirect multiply
pow      ->    binary exponentiation
prho     ->    pollard rho prime factorization[pf = prime factorization, pr = pollard rho]
cout     ->    standard output
cin      ->    standard input
ll       ->    long long
i64      ->    int64_t
i32      ->    int32_t
uint     ->    unsigned int
ull      ->    unsigned long long
str      ->    std::string
scast    ->    static_cast
dcast    ->    dynamic_cast
for      ->    for loop
fore     ->    foreach loop
fori     ->    iterator of container
while    ->    while loop
mkp      ->    make_pair
mkt      ->    make_tuple
rndm_d   ->    random_device
rndm_mt  ->    mt19937
rndm_mt64->    mt19937_64
uintd    ->    uniform_int_distribution
uptr     ->    unique_ptr
sptr     ->    shared_ptr
wptr     ->    weak_ptr
gcd      ->    gcd function
min      ->    min function
max      ->    max function
minel    ->    min_element function
maxel    ->    max_element function
sort     ->    sort function
ubound   ->    upper_bound
lbound   ->    lower_bound
timer    ->    benchmark performance
map      ->    map
vec      ->    vector with integer
vll      ->    vector with long long
vpi      ->    vector pair with integer
vpll     ->    vector pair with long long
vofv     ->    vector of vector
set      ->    set
endsnippet

snippet ponce "#pragma once include guard"
#pragma once

endsnippet

snippet ll "long long"
long long
endsnippet

snippet i64 "int64_t"
int64_t
endsnippet

snippet i32 "int32_t"
int32_t
endsnippet

snippet ull "unsigned long long"
unsigned long long
endsnippet

snippet uint "unsigned int"
unsigned int
endsnippet


snippet tmp "Normal Template"
/**
 * author : toerso
 * to     : mazda
 * date   : `date +%d.%m.%y`
 */

/* Problem ID: ${1:id-cf} */
#include<iostream>

int main(int argc, char *argv[]) {


   return 0;
}
endsnippet

snippet ctmp "Contest Template"
/**
 * author : toerso
 * to     : mazda
 * date   : `date +%d.%m.%y`
 */

/* Problem ID: ${1:id-cf} */
#include<bits/stdc++.h>

#define LONGMAX std::numeric_limits<int64_t>::max()
#define LONGMIN std::numeric_limits<int64_t>::min()
#define INTMAX std::numeric_limits<int32_t>::max()
#define INTMIN std::numeric_limits<int32_t>::min()
#define mod %

namespace MazdaXtoerso {
    struct Timer {
    private:
        std::chrono::time_point<std::chrono::high_resolution_clock> startTimePoint, endTimePoint;
    public:
        Timer() {
            startTimePoint = std::chrono::high_resolution_clock::now();
        }
        ~Timer() {
            endTimePoint = std::chrono::high_resolution_clock::now();
            std::chrono::duration<long int, std::ratio<1, 1000000>>::rep start = std::chrono::time_point_cast<std::chrono::microseconds>(startTimePoint).time_since_epoch().count();
            std::chrono::duration<long int, std::ratio<1, 1000000>>::rep end = std::chrono::time_point_cast<std::chrono::microseconds>(endTimePoint).time_since_epoch().count();
            std::chrono::duration<long int, std::ratio<1, 1000000>>::rep microDuration = end - start;
            double milliDuration = microDuration*0.001;
            double secondDuration = milliDuration*0.001;
            std::cout << "\n\ntooks : ";
            std::cout << microDuration << "(us) " << milliDuration << "(ms) " << secondDuration << "(s)\n";
        }
    };
    namespace Benchmark {
        Timer* timer;
        void start() {
         #ifndef ONLINE_JUDGE
           timer = new Timer();
         #define TIMER
         #endif
        }
        void end() {
         #ifndef ONLINE_JUDGE
         #ifdef TIMER
            delete timer;
         #endif
         #endif
        }
    }
}

using ui64 = uint64_t;

constexpr int MODVALUE = 1e9+7;
void io_exe(int&);

void solution() {

}

/********************************************Danger******************************/
int main(int argc, char *argv[]) {
   int queries;
   io_exe(queries);

   for(int q = 0; q < queries; q++) {
      solution();
   }

   return 0;
}

void io_exe(int& queries) {
   queries = 1;
   std::ios_base::sync_with_stdio(false);
   std::cin.tie(NULL);

#ifndef ONLINE_JUDGE
   (void) !freopen("Input.txt", "r", stdin);
   (void) !freopen("Output.txt", "w", stdout);
#endif

#ifdef TEST_CASE_ENABLED
   std::cin >> queries;
#endif
}
endsnippet

##some important custom function
#gcd

#sieve of eratosthanes
snippet sieve "All Prime Generator"
class Sieve {
private:
   std::vector<int> primes;
   int sqrtN, number;
public:
   Sieve(int n):number(n) {
      int size = (n/32) + 1;
      sqrtN = static_cast<int>(std::sqrt(n));
      primes.resize(size, 0);
      _Pri_genPrimes();
   }
private:
   int _Pri_setAsPrime(int value, int pos) {
      return value|=(1<<pos);
   }
   bool _Pri_checkPrime(int value, int pos) {
      return value&(1<<pos);
   }
   bool _Pri_genPrimes() {
      for(int i = 3; i <= sqrtN; i += 2) {
         if(_Pri_checkPrime(primes[i>>5], i&31)) continue;//i/32 and i%32
         for(int j = i*i; j <= number; j += 2*i) {
            primes[j>>5] = _Pri_setAsPrime(primes[j>>5], j&31);
         }
      }
      return true;
   }

public:
   bool isPrime(int value) {
      if(value == 2) return true;
      if(value%2 == 0 || value == 1) return false;
      return !_Pri_checkPrime(primes[value>>5], value&31);
   }
};
endsnippet

#Euler totient function(ETF/PHI)
snippet etf "Euler Totient Function(phi(0-1e5+9))"
const int N = 1e5+9;
int phi[N];

void totient() {
   for (int i = 0; i < N; ++i) phi[i] = i;

   for (int i = 2; i < N; ++i) {
      if(phi[i] == i) {
         for (int j = i; j < N; j += i) phi[j] -= phi[j]/i;
      }
   }
}
endsnippet

snippet rand_mtuid "merssen twister with uniform int distribution"
${1:int} rand(${2:int} lower, ${3:int} upper) {
   std::random_device rd;
   std::mt19937 gen(rd());
   std::uniform_int_distribution<${4:int}> dist(lower, upper);

   return dist(gen);
}
endsnippet

######## Pollard Rho Prime Factorization ########
snippet prho "Pollard Rho Prime Factorization"
namespace MazdaXtoerso {
    using ui128 = __uint128_t; constexpr int MAXLIMIT = 1e6+9;

    template<typename Tn> struct PollardRho {
    private:
        //Declare Smallest Prime Factors Array
        int spf[MAXLIMIT];

    private:
        inline Tn mult(Tn a, Tn b, Tn p) {
            return static_cast<Tn>(static_cast<ui128>(a)*b mod p);
        }

        inline Tn f(Tn x, Tn c, Tn n) {
            return (mult(x, x, n) + c) mod n;
        }

        inline Tn diff(Tn a, Tn b) {
            return (a > b) ? a - b : b - a;
        }

        inline Tn rand(Tn lower, Tn upper) {
            std::random_device rd;
            std::mt19937 gen(rd());
            std::uniform_int_distribution<Tn> dist(lower, upper);

            return dist(gen);
        }

        Tn pow(Tn base, Tn power, Tn p) {
            Tn res = 1;
            Tn newBase = base mod p;
            while(power) {
                if(power & 1) res = mult(res, newBase, p);
                newBase = mult(newBase, newBase, p);
                power >>= 1;
            }

            return res;
        }

        Tn gcd(Tn a, Tn b) {
            while(b) {
                a %= b; std::swap(a, b);
            }

            return a;
        }
        //have to call it at the beginnig of main function
        void init() {
            spf[1] = 1; int sqrtn = static_cast<int>(std::sqrt(MAXLIMIT));

            for (int i = 2; i < MAXLIMIT; ++i) spf[i] = i;
            for(int i = 4; i < MAXLIMIT; i += 2) spf[i] = 2;
            for (int i = 3; i <= sqrtn ; i += 2) {
                if(spf[i] != i) continue;

                for(int j = i*i; j < MAXLIMIT; j += i) {
                if(spf[j] != j) continue;
                spf[j] = i;
                }
            }
        }

        bool millerRabin(Tn p) {
            if(p < 4) return p == 2 || p == 3;
            int s = 0; Tn d = p - 1;

            while((d&1) == 0) {
                d >>= 1, s++;
            }

            auto isComposite = [&d, &s, &p, this](int a) -> bool {
                Tn x = pow(a, d, p);

                if(x == 1 || x == p - 1) return false;

                for (int r = 1; r < s; ++r) {
                    x = mult(x, x, p);
                    if(x == p - 1) return false;
                }

                return true;
            };

            for(int a : {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37}) {
                if(static_cast<Tn>(a) == p) return true;

                if(isComposite(a)) return false;
            }

            return true;
        }

        Tn pollardRhoBrent(Tn n) {
            Tn har = rand(2, n), c = rand(2, n), po = 1, q = 1;
            const Tn m = 128;
            Tn g, hars, tor;

            do {
                tor = har;
                for(Tn i = 0; i < po; ++i) har = f(har, c, n);

                Tn k = 0;

                do{
                    hars = har;

                    for(Tn i = 0; i < std::min(m, po - k); ++i) {
                        har = f(har, c, n);
                        q = mult(q, diff(har, tor), n);
                    }

                    g = gcd(q, n);
                    k += m;
                }while(k < po && g == 1);

                po <<= 1;
            }while(g == 1);

            if(g == n) {
                do {
                    hars = f(hars, c, n);
                    g = gcd(diff(hars, tor), n);
                }while(g == 1);
            }

            return g;
        }
    public:
        PollardRho() {//constructor
            init();
        }

    public:
        std::vector<Tn> primeFactorize(Tn n) {
            if(n <= 1) return {};
            if(millerRabin(n)) return {n};

            std::vector<Tn> primes, helper;

            if(n > 1 && n < MAXLIMIT) {
                do {
                    primes.emplace_back(spf[n]); n /= spf[n];
                }while(n != 1);

                return primes;
            }

            Tn p = pollardRhoBrent(n);
            p = (p != 0 && p != n) ? p : pollardRhoBrent(n);
            primes = primeFactorize(p);
            helper = primeFactorize(n/p);
            primes.insert(primes.end(), helper.begin(), helper.end());

            return primes;
        }
    };
};
endsnippet

#gcd
snippet gcd "Greatest Common Divisor"
#define gcd std::__gcd
endsnippet

#min
snippet min "Finding minimum"
std::min(${0});
endsnippet

#max
snippet max "Finding max"
std::max(${0});
endsnippet

#min_element
snippet minel "Finding minimum element"
std::min_element(${0});
endsnippet

#max_element
snippet maxel "Finding maximum element"
std::max_element(${0});
endsnippet

#sort elements
snippet sort "Sort elements"
std::sort(${0});
endsnippet

#upper_bound (ForwardIterator first, ForwardIterator last, const T& val)
snippet ubound "upper_bound"
std::upper_bound(v.begin(), v.end(), ${0});
endsnippet

#lower_bound (ForwardIterator first, ForwardIterator last, const T& val);
snippet lbound "lower_bound"
std::lower_bound(v.begin(), v.end(), ${0})
endsnippet

#binary exponentiation
snippet powmul "Binary Exponentiation Class"
template<typename Tbase, typename Tpower, typename Tmod> class Exponentiation {
private:
   Tmod _Pri_BinMul(Tmod a, auto b, Tmod p) {
      Tmod result = 0;
      while(b) {
         if(b&1) result = (result + a) mod p;
         a = (a + a) mod p;
         b >>= 1;
      }
      return result;
   }
   Tmod _Pri_BinExpo(Tbase base, auto power, Tmod p = INTMAX) {
      Tmod exponent_value = 1;
      while(power) {
         if(power&1) exponent_value = _Pri_BinMul(base, exponent_value, p);
         base = _Pri_BinMul(base, base, p);
         power >>= 1;
      }
      return exponent_value;
   }
public:
   int pow(Tbase base, Tpower power, Tmod p = INTMAX) {
      Tmod new_base = base mod p;
      Tmod exponent_value = 1;
#ifdef __COMPILE_EXPO_STR__
      int current = base, size = static_cast<int>(power.size()) - 1;
      for(int i = size; i >= 0; --i) {
         exponent_value = (exponent_value * _Pri_BinExpo(current, static_cast<Tmod>(power[i]-'0'), p)) mod p;
         current = _Pri_BinExpo(current, 10, p);
      }
#endif
#ifndef __COMPILE_EXPO_STR__
      exponent_value = _Pri_BinExpo(new_base, power, p);
#endif
      return exponent_value;
   }
};
endsnippet

snippet pow "Binary Exponentiation"
template<typename Tbase, typename Tpower, typename Tmod> Tmod pow(Tbase base, Tpower power, Tmod p = MODVALUE) {
   Tmod res = 1;
   Tmod newBase = base mod p;
   while(power) {
      if(power & 1) res = (res*newBase) mod p;
      newBase = (newBase * newBase) mod p;
      power >>= 1;
   }

   return res;
}
endsnippet

#Equation class
snippet equation "Equation class"
class Equation {
public:
   int extendedEuclid(int a, int b, int& x, int& y) {
      x = 1, y = 0;
      int x1 = 0, y1 = 1;

      while(b) {
         std::tie(x, x1) = std::make_tuple(x1, x - x1*(a/b));
         std::tie(y, y1) = std::make_tuple(y1, y - y1*(a/b));
         std::tie(a, b) = std::make_tuple(b, a - b*(a/b));
      }

      return a;
   }

   bool findAnySolution(int a, int b, int c, int& x, int& y, int& g) {
      g = extendedEuclid(a, b, x, y);

      if(c%g) return false;

      x *= (c/g), y *= (c/g);

      if(a < 0) x = -x;
      if(b < 0) y = -y;

      return true;
   }

   int findAllSolutions(int a, int b, int c, int minx, int maxx, int miny, int maxy) {
       int x, y, g;

       if (!findAnySolution(a, b, c, x, y, g))
           return 0;

       a /= g;
       b /= g;

       int sign_a = a > 0 ? +1 : -1;
       int sign_b = b > 0 ? +1 : -1;

       auto shiftSolution = [&x, &y, &a, &b](int count) {
         x += count * b;
         y -= count * a;
       };

       shiftSolution((minx - x) / b);
       if (x < minx)
           shiftSolution(sign_b);
       if (x > maxx)
           return 0;
       int lx1 = x;

       shiftSolution((maxx - x) / b);
       if (x > maxx)
           shiftSolution(-sign_b);
       int rx1 = x;

       shiftSolution(-(miny - y) / a);
       if (y < miny)
           shiftSolution(-sign_a);
       if (y > maxy)
           return 0;
       int lx2 = x;

       shiftSolution(-(maxy - y) / a);
       if (y > maxy)
           shiftSolution(sign_a);
       int rx2 = x;

       if (lx2 > rx2)
           std::swap(lx2, rx2);

       int lx = std::max(lx1, lx2);
       int rx = std::min(rx1, rx2);

       if (lx > rx)
           return 0;

       /*
        *Once we have lx and rx, it is also simple to enumerate through all the solutions.
        *Just need to iterate through x = lx + k.b/g for all k >= 0 until x = rx and find the corresponding y values using the equation ax + by = c.
        **/

       return (rx - lx) / abs(b) + 1;
   }
};
endsnippet

snippet timer "Measure Execution Time"
namespace MazdaXtoerso {
    struct Timer {
    private:
        std::chrono::time_point<std::chrono::high_resolution_clock> startTimePoint, endTimePoint;
    public:
        Timer() {
            startTimePoint = std::chrono::high_resolution_clock::now();
        }
        ~Timer() {
            endTimePoint = std::chrono::high_resolution_clock::now();
            std::chrono::duration<long int, std::ratio<1, 1000000>>::rep start = std::chrono::time_point_cast<std::chrono::microseconds>(startTimePoint).time_since_epoch().count();
            std::chrono::duration<long int, std::ratio<1, 1000000>>::rep end = std::chrono::time_point_cast<std::chrono::microseconds>(endTimePoint).time_since_epoch().count();
            std::chrono::duration<long int, std::ratio<1, 1000000>>::rep microDuration = end - start;
            double milliDuration = microDuration*0.001;
            double secondDuration = milliDuration*0.001;
            std::cout << "\n\ntooks : ";
            std::cout << microDuration << "(us) " << milliDuration << "(ms) " << secondDuration << "(s)\n";
        }
    };
    namespace Benchmark {
        Timer* timer;
        void start() {
         #ifndef ONLINE_JUDGE
           timer = new Timer();
         #define TIMER
         #endif
        }
        void end() {
         #ifndef ONLINE_JUDGE
         #ifdef TIMER
            delete timer;
         #endif
         #endif
        }
    }
}
endsnippet


snippet main
int main(int argc, char *argv[])
{
	${0}
	return 0;
}
endsnippet

#defination
#testcase enable
snippet def-etc "enable test case"
#define TEST_CASE_ENABLED
endsnippet

#compile exponentiation with string
snippet def-cexpostr "Compile Exponentiation String"
#define __COMPILE_EXPO_STR__
endsnippet

##standard output
#std::cout
snippet cout "standard output"
std::cout << ${1:x} << "\n";
endsnippet

##standard input
#std::cin
snippet cin "standard input"
std::cin >> ${1:x};
endsnippet

snippet scast "Static Cast"
static_cast<${1}>(${2});
endsnippet

snippet dcast "Dynamic Cast"
dynamic_cast<${1}>(${2});
endsnippet

snippet str "std::string"
std::string ${0}
endsnippet

snippet rndm_d "std::random_device"
std::random_device rd;
endsnippet

snippet rndm_mt "std::mt19937"
std::mt19937 gen(rd());
endsnippet

snippet rndm_mt64 "std::mt19937_64"
std::mt19937_64 gen(rd());
endsnippet

snippet uintd "std::uniform_int_distribution"
std::uniform_int_distribution<${0}> dist(${1:f}, ${2:t});
endsnippet

##STL funtionality
#std::make_pair()
snippet mkp "std::make_pair(x, y)"
std::make_pair(${1:x}, ${2:y});
endsnippet

#std::make_tuple()
snippet mkt "std::make_tuple(x, y, z)"
std::make_tuple(${1:x}, ${2:y}, ${3:z});
endsnippet

#std::unique_ptr
snippet uptr "std::unique_ptr<>"
std::unique_ptr<${1:T}> ptr = std::make_unique<`!p import re; snip.rv = re.split("[^\w]",t[1])[-1]`>(${2:x});
endsnippet

#std::shared_ptr
snippet sptr "std::shared_ptr<>"
std::shared_ptr<${1:T}> ptr = std::make_shared<`!p import re; snip.rv = re.split("[^\w]",t[1])[-1]`>(${2:x});
endsnippet

##all for loop variation
#for loop
snippet for "for loop"
for (${6:int} ${3:i} = 0; `!p import re; snip.rv = re.split("[^\w]",t[3])[-1]` ${4:<} ${1:count}; ${5:++`!p snip.rv = t[3].split(" ")[-1]`}) {
	${VISUAL}$0
}
endsnippet

#foreach loop
snippet fore "foreach loop"
for(${3:auto} ${2:elem}: ${1:container}) {
   ${VISUAL}$0
}
endsnippet

#iterator
snippet fori "iterator"
for (${6:auto} ${1:i} = ${2:v.begin()}; `!p import re; snip.rv = re.split("[^\w]",t[1])[-1]` ${4:!=} ${3:`!p m = re.search(r'^(?:(.*)(\.|->)begin\(\)|((?:std|boost)::)?begin\((.*)\))$', t[2]); snip.rv = (((m.group(3) if m.group(3) else "") + "end(" + m.group(4) + ")") if m.group(4) else (m.group(1) + m.group(2) + "end()")) if m else ""`}; ${5:++`!p snip.rv = t[1].split(" ")[-1]`}) {
	${VISUAL}$0
}
endsnippet

snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

#while loop
snippet while "while loop"
while(${1:x}) {
   $0
}
endsnippet


snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet nsa "namespace alias"
namespace ${1:alias} = ${2:namespace};
endsnippet

snippet using "using directive/using declaration/type alias"
using ${1:namespace}`!p snip.rv = ' ' if t[1] == 'namespace' else ' = ' if t[1] != '' else ''`${2:name};
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

##stl container
#std::map<>
snippet map "std::map (map)"
std::map<${1:int}, `!p import re; snip.rv = re.split("[^\w]",t[1])[-1]`> map$0;
endsnippet

#std::vector<>
snippet vec "std::vector" i
std::vector<${1:char}> ${2:name};
$0
endsnippet

#std::vector<std::pair<>>
snippet vecp "std::vector<std::pair<x, x>> (vp)"
std::vector<std::pair<${1:int}, `!p import re; snip.rv = re.split("[^\w]",t[1])[-1]`>> vp$0;
endsnippet

#std::vector<std::vector<>>
snippet vofv "std::vector<std::vector<>>"
std::vector<std::vector<${1:int}>> vv$0;
endsnippet

#std::set<>
snippet set "std::set (s)"
std::set<${1:int}>s$0;
endsnippet

#std::set<std::pair<>>
snippet setp "std::set<std::pair<x, x>> (sp)"
std::set<std::pair<${1:int}, `!p import re; snip.rv = re.split("[^\w]",t[1])[-1]`>> sp$0;

endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet


snippet fnc "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param}) {
	${0:FunctionBody}
}
endsnippet

snippet boost_test "Boost test module" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_CASE(${2:TestCaseName})
{
	${0:TestDefinition}
}

endsnippet

snippet boost_suite "Boost test suite module" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_SUITE(${2:SuiteName})

BOOST_AUTO_TEST_CASE(${3:TestCaseName})
{
	${0:TestDefinition}
}

BOOST_AUTO_TEST_SUITE_END()

endsnippet
snippet boost_test_fixture "Boost test module with fixture" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

struct ${2:FixtureName} {
	$2() {}
	virtual ~$2() {}
	/* define members here */
};

BOOST_FIXTURE_TEST_CASE(${3:SuiteName}, $2)
{
	${0:TestDefinition}
}

endsnippet

snippet boost_suite_fixture "Boost test suite with fixture" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

struct ${2:FixtureName} {
	$2() {}
	virtual ~$2() {}
	/* define members here */
};

BOOST_FIXTURE_TEST_SUITE(${3:SuiteName}, $2)

BOOST_AUTO_TEST_CASE(${4:TestCaseName})
{
	${0:TestDefinition}
}

BOOST_AUTO_TEST_SUITE_END()

endsnippet
# vim:ft=snippets:
