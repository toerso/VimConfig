#!/bin/bash
#1. It compiles your cpp file and catches many bugs there itself, eg. Variable shadowing, integer overflow, float comparison et cetera
#2. If input present in the format given in point 5 then it runs the program on it otherwise you can manually insert the input
#3. It checks for Time limit that you pass as the second argument
#4. If you have expected output in the format given in point 6, it runs a diff on your output and expected output
#5. There should be input1, input2, ... files present to take them as input
#6. If you have the expected output store it as output1, output2, ...
#7. I'll comment the code soon for easier understanding. Till then use as mentioned below
#usage
# $ compile filename.cpp time(in sec)
#example
# $ compile main.cpp 1
ulimit -s 256000 # default mem limit 256 MB

echo -e "____________welcome \e[1m\e[91mmr.convict\e[0m______________"
if #compilation
	rm -rf test.sh
 # rm -rf ./a.out
 # g++ -std=gnu++14 -Wall -g -Wextra -Wshadow -Wfloat-equal -fmax-errors=1 -Wconversion -Wshift-overflow=2 -Wduplicated-cond -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -D_FORTIFY_SOURCE=2 -fsanitize=signed-integer-overflow -fsanitize=bounds -O2 $1
then #if compilation successful
#  echo -e "\e[32m\e[1mCompilation Successful!\e[0m"
  INPUT_NAME=input                    #the input filename string
  OUTPUT_NAME=my_output               #the output filename string
  REALOUTPUT_NAME=output              #the real output filename string
  if [ -f "input1" ];                 #if input1 present that means there are input files
  then
	 echo -e "Input files exist."
	 for test_file in $INPUT_NAME*     #iterations on all input files
	 do
		i=$((${#INPUT_NAME}))
		test_case=${test_file:$i}       #get the index from input file
		echo -e "============================================\e[93m"
		echo -e "||||||||||||||||||||||||||||||||||||||||||||\e[93m"
		echo -e "============================================\e[93m"
		echo -e "\t\e[1mSample Test case: $test_case\e[0m\e[93m"
		if timeout $2 /usr/bin/time --format="\tMemory Used  : %M kb\n\tTime Elapsed : %e sec" ./a.out < $INPUT_NAME$test_case > $OUTPUT_NAME$test_case ; then                                 #If program runs in specified runtime
			echo -e "____________________________________________\e[93m"
			echo -e "\______________ Input File_________________/\e[93m"
			echo -e "\e[97m\e[1m"
			let var=($(wc -l < $INPUT_NAME$test_case))
			if [ "$var" -gt 15 ] ; then
				sed -n 1,10p $INPUT_NAME$test_case
				echo -e "..."
			else
				cat $INPUT_NAME$test_case
			fi
			echo -e "____________________________________________\e[93m"
			echo -e "\_______________Expected Output ____________/\e[93m"
			echo -e "\e[97m\e[1m"
			let var=($(wc -l < $REALOUTPUT_NAME$test_case))
			if [ "$var" -gt 15 ] ; then
				sed -n 1,10p $REALOUTPUT_NAME$test_case
				echo -e "..."
			else
				cat $REALOUTPUT_NAME$test_case
			fi
			echo -e "____________________________________________\e[93m"
			echo -e "\_______________Output File________________/\e[93m"
			echo -e "\e[97m\e[1m"
			let var=($(wc -l < $OUTPUT_NAME$test_case))
			if [ "$var" -gt 15 ] ; then
				sed -n 1,10p $OUTPUT_NAME$test_case
				echo -e "..."
			else
				cat $OUTPUT_NAME$test_case
			fi
		else                            #otherwise TLE
		  echo -e "\e[91m\e[1m\tTime Limit Exceeded! \e[0mAllowed : $2s"
		  echo "TLE" > $OUTPUT_NAME$test_case        #mark for tle(used in verdict see below)
		fi
	 done
	 if [ -f "output1" ]; then         #if expected output files present then do diff to compare
		echo -e "============================================\e[93m"
		echo -e "==================VERDICT==================="
		for test_file in $INPUT_NAME*   #iterations on all output files
		do
		  i=$((${#INPUT_NAME}))
		  test_case=${test_file:$i}     #get the index of input file
		  if grep -Fxq "TLE" $OUTPUT_NAME$test_case; then    #checks for the TLE mark (see above) ##TODO need to find a better way
			 echo -e "\e[1m\e[31m\tSample test $test_case: Time Limit Exceeded\e[0m"
		  elif diff --brief --ignore-trailing-space $REALOUTPUT_NAME$test_case $OUTPUT_NAME$test_case >> errlg; then  #do a diff on output and my_output
			 echo -e "\e[1m\e[32m\tSample test $test_case: Accepted\e[0m"
			 rm -rf errlg
		  else                          #if it isn't tle or accepted then wrong answer. ##TODO store the memory used and check for memory limit
			 echo -e "\e[1m\e[31m\tSample test $test_case: Wrong Answer\e[0m"
		  fi
		done
	 fi

  else
	 echo -e "Input files doesn't exist. Please enter input MANUALLY. TLE won't be identified."
	 echo -e " "
	 ./a.out > out
	 cat out
	 echo -e "____________________________________________"
  fi

else
  echo -e "\e[91m\e[1mCompilation Error!\e[0m";
fi
echo -e "____________________________________________"
#for i in {1..28}
#do
#echo -e ""
#done
#
#echo -e "\t\e[31m***********************************************************\e[0m"
#echo -e "\t\e[5m\e[101m\t\e[4mWARNING : Check for following possible bugs:\e[0m"
#echo -e "\t0)\e[0m\e[32m Variable Shadowing?? \e[91mCheck for \e[1mMAXN, EPS, INF!!!\e[0m"
#echo -e "\t1)\e[0m\e[93m TEST on ATLEAST 10 hard testcases before submitting!\e[0m"
#echo -e "\t2)\e[0m\e[32m Make Tests Cases On The Fly! \e[91mNeed to try stress testing?\e[0m"
#echo -e "\t3)\e[0m\e[36m Check for corner cases, and all end points!\e[0m"
#echo -e "\t4)\e[0m\e[93m Check for \e[1minteger overflow,\e[0m product of two int!\e[0m"
#echo -e "\t5)\e[1m\e[32m int -> long long ?? \e[36mint * 1LL or %d -> %ld??\e[0m"
#echo -e "\t6)\e[0m\e[91m floating point precision?? \e[32m setprecision?? \e[1m%.9f?? \e[0m"
#echo -e "\t7)\e[0m\e[32m Use \e[1masserts\e[0m to avoid RTE on assumptions!\e[0m"
#echo -e "\t8)\e[0m\e[32m \e[1m==\e[0m operator?? Index out of bounds??\e[0m"
#echo -e "\t9)\e[0m\e[32m matrix \e[1mm x n or n x m??\e[0m \e[91mprinting the white spaces??\e[0m"
#echo -e "\n\t    \e[4m\e[1m\e[37mNOT YET?? TRY different or add something new here!!!\e[91m\e[0m"
#echo -e "\t\e[31m*************************mr.convict************************\e[0m"
